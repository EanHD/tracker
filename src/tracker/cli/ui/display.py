"""CLI UI components for display"""

from datetime import date
from decimal import Decimal
from typing import Optional
import textwrap

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text

console = Console()


def get_stress_color(stress_level: int) -> str:
    """Get color for stress level"""
    if stress_level <= 3:
        return "green"
    elif stress_level <= 6:
        return "yellow"
    else:
        return "red"


def format_currency(amount: Optional[Decimal]) -> str:
    """Format currency value"""
    if amount is None:
        return "N/A"
    return f"${amount:,.2f}"


def display_entry(entry, show_feedback: bool = False):
    """Display a daily entry with Rich formatting"""
    
    # Build the display text
    lines = []
    
    # Financial section
    lines.append("[bold cyan]💰 Financial Snapshot[/bold cyan]")
    lines.append(f"  Cash on hand: {format_currency(entry.cash_on_hand)}")
    lines.append(f"  Bank balance: {format_currency(entry.bank_balance)}")
    lines.append(f"  Income today: {format_currency(entry.income_today)}")
    lines.append(f"  Bills due: {format_currency(entry.bills_due_today)}")
    lines.append(f"  Total debt: {format_currency(entry.debts_total)}")
    lines.append(f"  Side income: {format_currency(entry.side_income)}")
    lines.append("")
    
    # Spending section
    lines.append("[bold cyan]🛒 Spending[/bold cyan]")
    lines.append(f"  Food: {format_currency(entry.food_spent)}")
    lines.append(f"  Gas: {format_currency(entry.gas_spent)}")
    lines.append(f"  Total: {format_currency(entry.food_spent + entry.gas_spent)}")
    lines.append("")
    
    # Work section
    lines.append("[bold cyan]💼 Work[/bold cyan]")
    lines.append(f"  Hours worked: {entry.hours_worked}")
    lines.append("")
    
    # Wellbeing section
    stress_color = get_stress_color(entry.stress_level)
    lines.append("[bold cyan]🧘 Wellbeing[/bold cyan]")
    lines.append(f"  Stress level: [{stress_color}]{entry.stress_level}/10[/{stress_color}]")
    lines.append(f"  Priority: {entry.priority or 'N/A'}")
    
    if entry.notes:
        lines.append("")
        lines.append("[bold cyan]� Journal[/bold cyan]")
        lines.append(f"  {entry.notes}")
    
    # Create panel
    panel = Panel(
        "\n".join(lines),
        title=f"[bold]Entry for {entry.date}[/bold]",
        border_style="blue",
        padding=(1, 2),
    )
    
    console.print(panel)
    
    # Display feedback if requested and available
    if show_feedback and hasattr(entry, 'feedback') and entry.feedback:
        display_feedback(entry.feedback)


def display_feedback(feedback):
    """Display AI feedback"""
    
    if feedback.status == "pending":
        console.print("\n[yellow]⏳ AI feedback is being generated...[/yellow]")
        return
    
    if feedback.status == "failed":
        console.print(f"\n[red]❌ AI feedback generation failed: {feedback.error_message}[/red]")
        return
    
    # Display completed feedback
    panel = Panel(
        feedback.content,
        title="[bold green]🤖 AI Motivational Feedback[/bold green]",
        border_style="green",
        padding=(1, 2),
    )
    console.print("\n")
    console.print(panel)
    
    # Show metadata
    if feedback.provider:
        metadata = f"[dim]Generated by {feedback.provider}"
        if feedback.model:
            metadata += f" ({feedback.model})"
        if feedback.generation_time:
            metadata += f" in {feedback.generation_time:.1f}s"
        metadata += "[/dim]"
        console.print(metadata)


def display_entry_preview(entry_data: dict):
    """Display entry preview before saving"""
    
    lines = []
    lines.append(f"Date: {entry_data['date']}")
    lines.append(f"Cash on hand: {format_currency(entry_data.get('cash_on_hand'))}")
    lines.append(f"Bank balance: {format_currency(entry_data.get('bank_balance'))}")
    lines.append(f"Income: {format_currency(entry_data.get('income_today'))}")
    lines.append(f"Bills: {format_currency(entry_data.get('bills_due_today'))}")
    lines.append(f"Debt: {format_currency(entry_data.get('debts_total'))}")
    lines.append(f"Hours worked: {entry_data.get('hours_worked')}")
    lines.append(f"Side income: {format_currency(entry_data.get('side_income'))}")
    lines.append(f"Food: {format_currency(entry_data.get('food_spent'))}")
    lines.append(f"Gas: {format_currency(entry_data.get('gas_spent'))}")
    
    stress_color = get_stress_color(entry_data.get('stress_level', 5))
    lines.append(f"Stress: [{stress_color}]{entry_data.get('stress_level')}/10[/{stress_color}]")
    lines.append(f"Priority: {entry_data.get('priority') or 'N/A'}")
    
    if entry_data.get('notes'):
        lines.append("")
        # Word wrap the journal entry to avoid splitting words
        wrapped_lines = textwrap.wrap(entry_data['notes'], width=70, break_long_words=False, break_on_hyphens=False)
        lines.append("Journal:")
        for line in wrapped_lines:
            lines.append(f"  {line}")
    
    panel = Panel(
        "\n".join(lines),
        title="[bold]Entry Preview[/bold]",
        border_style="cyan",
        padding=(1, 2),
    )
    
    console.print("\n")
    console.print(panel)


def display_success(message: str):
    """Display success message"""
    console.print(f"\n[bold green]✅ {message}[/bold green]\n")


def display_error(message: str):
    """Display error message"""
    console.print(f"\n[bold red]❌ {message}[/bold red]\n")


def display_info(message: str):
    """Display info message"""
    console.print(f"\n[cyan]ℹ️  {message}[/cyan]\n")
